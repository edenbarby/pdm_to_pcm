#include "KaiserWindow.hpp"
#include "gtest/gtest.h"

TEST(KaiserWindowTests, TestOne)
{
    constexpr std::size_t filterKernelSize = 64;
    // A reference Kaiser window generated in python as follows:
    //    scipy.signal.windows.kaiser(64, 8.6)
    constexpr std::array<double, filterKernelSize> truthKernel = {
        0.0013325139979024198, 0.0033780706790222247, 0.006586264754749065,  0.01128276240425288,
        0.017821246857048233,  0.026574136226422313,  0.03792105895725622,   0.05223535747574751,
        0.06986901477999875,   0.09113651292826536,   0.11629822993881854,   0.14554405629326275,
        0.17897795869541638,   0.2166042328603551,    0.2583161662740322,    0.3038877751654489,
        0.3529691882966358,    0.40508612638502683,   0.45964377459338085,   0.5159351727221273,
        0.5731540610167842,    0.6304119273359405,    0.6867588128527344,    0.7412072576294143,
        0.7927586130858559,    0.8404308235200815,    0.8832866901085968,    0.9204615832581574,
        0.9511895659143617,    0.9748269324546526,    0.9908722539020299,    0.9989821470221687,
        0.9989821470221687,    0.9908722539020299,    0.9748269324546526,    0.9511895659143617,
        0.9204615832581574,    0.8832866901085968,    0.8404308235200815,    0.7927586130858559,
        0.7412072576294143,    0.6867588128527344,    0.6304119273359405,    0.5731540610167842,
        0.5159351727221273,    0.45964377459338085,   0.40508612638502683,   0.3529691882966358,
        0.3038877751654489,    0.2583161662740322,    0.2166042328603551,    0.17897795869541638,
        0.14554405629326275,   0.11629822993881854,   0.09113651292826536,   0.06986901477999875,
        0.05223535747574751,   0.03792105895725622,   0.026574136226422313,  0.017821246857048233,
        0.01128276240425288,   0.006586264754749065,  0.0033780706790222247, 0.0013325139979024198,
    };
    constexpr std::array<double, filterKernelSize> testKernel = KaiserWindow::Create<64>(8.6);
    for (size_t i = 0; i < filterKernelSize; ++i)
    {
        ASSERT_NEAR(truthKernel.at(i), testKernel.at(i), 1e-14);
    }
}